<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>༧</title>
    <link>https://bsssq.xyz/</link>
    <description>Recent content on ༧</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 18 Jan 2024 11:05:32 -0500</lastBuildDate>
    <atom:link href="https://bsssq.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>neverMind</title>
      <link>https://bsssq.xyz/posts/2024/01/nevermind/</link>
      <pubDate>Thu, 18 Jan 2024 11:05:32 -0500</pubDate>
      <guid>https://bsssq.xyz/posts/2024/01/nevermind/</guid>
      <description>as part of a post-layoff glow-up, i began to delve deeper into programming and building my own tools. a lot of these tools are based on specific actions, like attacks, analysis, etc. one thing i&amp;rsquo;ve always been fascinated with though is object-oriented programming used to build applications from the ground up, specifically backdoors.
backdoors are often used for securing remote access to a computer. they&amp;rsquo;re used for legitimate purposes, like by system administrators for system management (fix issues, install updates, perform maintenance) without being physically present.</description>
    </item>
    <item>
      <title>zynOS rom-0 fetching</title>
      <link>https://bsssq.xyz/posts/2024/01/zynos-rom-0-fetching/</link>
      <pubDate>Wed, 10 Jan 2024 11:32:59 -0500</pubDate>
      <guid>https://bsssq.xyz/posts/2024/01/zynos-rom-0-fetching/</guid>
      <description>i was poking around old vulnerabilities, that specifically affected home networks and i found this (now patched) exploitable vulnerability affecting zynOS routers. the vulnerability allows an attacker to download the router&amp;rsquo;s configuration (ROM-0 file) without any type of authentication. this file could then be later decompressed to expose the router&amp;rsquo;s admin password, wifi password, etc.
the program i wrote attempts to connect to a valid host to download said ROM-0 file, extracts specific data from it (using regex), then logs back into the same host via telnet to change DNS settings, set a system password, and log out.</description>
    </item>
    <item>
      <title>cinestill 400d</title>
      <link>https://bsssq.xyz/photography/2024/01/cinestill-400d/</link>
      <pubDate>Wed, 03 Jan 2024 10:47:30 -0500</pubDate>
      <guid>https://bsssq.xyz/photography/2024/01/cinestill-400d/</guid>
      <description>first time running with the cinestill 400d. it&amp;rsquo;s quite a finicky film, and i&amp;rsquo;m not sure i have the skill or patience (yet) to deal with its many quirks.</description>
    </item>
    <item>
      <title>reading list [updated: january 29th, 2024]</title>
      <link>https://bsssq.xyz/posts/2024/01/reading-list-updated-january-29th-2024/</link>
      <pubDate>Wed, 03 Jan 2024 10:08:54 -0500</pubDate>
      <guid>https://bsssq.xyz/posts/2024/01/reading-list-updated-january-29th-2024/</guid>
      <description>currently reading
aberration in the heartland of the real by wendy s. painting
palestine by joe sacco
queue
the three body problem by cixin liu
solenoid by mircea cartarescu
the poetics of space by gaston bachelard
the messianic reduction: walter benjamin and the shape of time by peter fenves
the storm before the storm: the beginning of the end of the roman republic by mike duncan
elite capture: how the powerful took over identity politics (and everything else) by olufemi o.</description>
    </item>
    <item>
      <title>cookieJar</title>
      <link>https://bsssq.xyz/posts/2024/01/cookiejar/</link>
      <pubDate>Tue, 02 Jan 2024 10:11:43 -0500</pubDate>
      <guid>https://bsssq.xyz/posts/2024/01/cookiejar/</guid>
      <description>a fun aspect of pentesting is finding interesting ways to get authenticated sessions running. usually, a session authentication relies on the user entering some kind of key (password) that corresponds to their user ID (username). however, in some cases an attacker can &amp;ldquo;revive&amp;rdquo; sessions using just the session cookies.
i wrote cookieJar for exactly this purpose: extracting cookies from various browsers (and factor in the OS) and then use them to create authenticated sessions.</description>
    </item>
    <item>
      <title>violaTor</title>
      <link>https://bsssq.xyz/posts/2023/12/violator/</link>
      <pubDate>Thu, 21 Dec 2023 11:17:54 -0500</pubDate>
      <guid>https://bsssq.xyz/posts/2023/12/violator/</guid>
      <description>since splurging on a new macbook m3 pro, that came with a 12-core CPU, 18-core GPU, 16-core neural engine, and 36GB of RAM, i thought to myself: i should probably use this to train some version of a local AI (LLM) i can use to boost my security and hacking toolchains, namely SAST/DAST and vulnerability scanning. thus began my journey into acquiring the perfect flavours of AI that were ideal for how i work (iteratively but in bursts, and lots of back and forth).</description>
    </item>
    <item>
      <title>portra 800</title>
      <link>https://bsssq.xyz/photography/2023/12/portra-800/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://bsssq.xyz/photography/2023/12/portra-800/</guid>
      <description>i really love this film.</description>
    </item>
    <item>
      <title>tcpSACK</title>
      <link>https://bsssq.xyz/posts/2023/12/tcpsack/</link>
      <pubDate>Thu, 07 Dec 2023 15:14:13 -0500</pubDate>
      <guid>https://bsssq.xyz/posts/2023/12/tcpsack/</guid>
      <description>a number of years ago, i received advice that would deeply change my outlook on engineering and understanding of technology.
if you want to understand how something works, build it.
at the time, i was a little too impatient to actually grasp the nuances of such advice, because i had the immediate gratification of well-built programs and tools to carry out whatever tasks i needed to. but as i delved deeper into security and pentesting, i understood that not everything is as well understood by everyone as i had once thought.</description>
    </item>
    <item>
      <title>ddos flood part I</title>
      <link>https://bsssq.xyz/posts/2023/12/ddos-flood-part-i/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://bsssq.xyz/posts/2023/12/ddos-flood-part-i/</guid>
      <description>earlier this week, while trawling through forums looking for malware and worm samples, i was surprised to find a rather intriguing, but hideous, slab of code. the source was a private channel for hackers of presumably israeli origin, and the script itself was part of a fully functional DDoS suite, including a .exe file for windows systems as well as a .apk for android smartphones. running the script from a *nix system seems simple enough:</description>
    </item>
    <item>
      <title>gdbExtract</title>
      <link>https://bsssq.xyz/posts/2023/11/gdbextract/</link>
      <pubDate>Mon, 27 Nov 2023 13:43:26 -0500</pubDate>
      <guid>https://bsssq.xyz/posts/2023/11/gdbextract/</guid>
      <description>over the past few days, i&amp;rsquo;ve been writing tools that automate cumbersome manual tasks and make my workflow/toolchain cleaner and pushing them to my personal github. the latest one in this series is a tool i call gdbExtract.
as a security researcher, i spend a lot of time diving deep into the worlds of software security and system analysis. in these domains, binary analysis and reverse engineering are critical tasks, but their challenging and complex nature can come across as intimidating.</description>
    </item>
  </channel>
</rss>
